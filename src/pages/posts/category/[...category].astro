---
import MainLayout from "../../../layouts/MainLayout.astro";
import { getCollection } from "astro:content";
import type { CollectionEntry } from "astro:content";
import ArticleCard from "../../../components/ArticleCard.astro";
import { capitalise } from "../../../utils";
import Button from "../../../components/Button.astro";

export async function getStaticPaths() {
  const allBlogArticles: CollectionEntry<"blog">[] = (
    await getCollection("blog")
  ).sort(
    (a: CollectionEntry<"blog">, b: CollectionEntry<"blog">) =>
      b.data.pubDate.valueOf() - a.data.pubDate.valueOf()
  );

  const uniqueCategories = [
    ...new Set(allBlogArticles.map((entry) => entry.data.category).flat()),
  ];

  return uniqueCategories.map((category) => {
    const categoryArticles = allBlogArticles.filter((article) =>
      article.data.category.includes(category)
    );
    return {
      params: { category },
      props: { posts: categoryArticles },
    };
  });
}

const { category } = Astro.params;

if (!category) throw new Error("Category is required in params");

const { posts } = Astro.props;
---

<MainLayout title=`${category} category`>
  <div class="flex justify-between items-center pb-3">
    <h1 class="text-2xl font-bold">
      All Posts in the "{capitalise(category)}" Category
    </h1>
    <Button buttonText="All categories" destination="/tag-category-index" />
  </div>

  <div class="grid grid-cols-1 gap-4 sm:grid-cols-2">
    {
      posts.map((article) => (
        <>
          <ArticleCard article={article} />
        </>
      ))
    }
  </div>
</MainLayout>
